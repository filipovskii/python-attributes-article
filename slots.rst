__slots__
=========

Как пишет `Guido <http://www.python.org/~guido/>`_ в своей `истории python <http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html>`_ о том, как изобретались new-style classes:

    ...Я боялся что изменения в системе классов плохо повлияют на производительность. В частности, чтобы дескрипторы данных работали корректно, все манипуляции атрибутами объекта начинались с проверки `__dict__` класса на то, что этот атрибут является дескриптором данных...

На случай, если пользователи разочаруются ухудшением производительности, заботливые разработчики python придумали `__slots__`.

Наличие `__slots__` ограничивает возможные имена атрибутов объекта теми, которые там указаны. Также, так как все имена атрибутов теперь заранее известны, снимает необходимость создавать `__dict__` экземпляра.


.. code-block:: python

    class Slotter:
        __slots__ = ["a", "b"]

    s = Slotter()
    s.__dict__      # AttributeError
    s.c = 1         # AttributeError
    s.a = 1
    s.a             # 1
    s.b = 1
    s.b             # 1
    dir(s)          # [ ... 'a', 'b'' ... ]

Оказалось, что опасения Guido не оправдались, но к тому времени, как это стало ясно, было уже слишком поздно. К тому же, использование `__slots__` действительно может увеличить производительность, особенно уменьшив количество используемой памяти при создании множества небольших объектов.
