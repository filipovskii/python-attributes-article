Алгоритмы поиска и установки значения атрибута
==============================================

Итак, чтобы получить значение атрибута `attrname` экземпляра `a` в python:

    1. Если определён метод `a.__class__.__getattribute__()`, то вызывается он и возвращается полученное значение.

    2. Если `attrname` это специальный (определённый python-ом) атрибут, такой как **__class__** или **__doc__**, возвращается его значение.

    3. Проверяется `a.__class__.__dict__` на наличие записи с `attrname`. Если она существует и значением является дескриптор данных, возвращается результат вызова метода `__get__()` дескриптора. Также проверяются все базовые классы.

    4. Если в `a.__dict__` существует запись с именем `attrname`, возвращается значение этой записи. Если `a` - это класс, то атрибут ищется и среди его базовых классов и, если там или в **__dict__** `a` дескриптор данных - возвращается результат `__get__()` дескриптора.

    5. Проверяется `a.__class__.__dict__`, если в нём существует запись с `attrname` и это "дескриптор не данных", возвращается результат `__get__()` дескриптора, если запись существует и там не дескриптор, возвращается значение записи. Также обыскиваются базовые классы.

    6. Если существует метод `a.__class__.__getattr__()`, он вызывается и возвращается его результат. Если такого метода нет - выкидывается `AttributeError`.

Чтобы установить значение `value` атрибута `attrname` экземпляра `a`:

    1. Если существует метод `a.__class__.__setattr__()`, он вызывается.

    2. Проверяется `a.__class__.__dict__`, если в нём есть запись с `attrname` и это дескриптор данных - вызывается метод `__set__()` дескриптора. Также проверяются базовые классы.

    3. В `a.__dict__` добавляется запись `value` с ключём `attrname`.
